import Foundation
import MultichainWalletConnect
import Alamofire

// MARK: - Alamofire Demo App

print("üöÄ Iniciando Alamofire Demo con MultichainWalletConnect")
print("========================================================")
print("")

// Configurar MultichainWalletConnect
let walletManager = MultichainWalletManager.shared

// Demo de conexi√≥n de billeteras
print("üîó Demo de Conexi√≥n de Billeteras:")
print("")

Task {
    do {
        // Conectar a TON
        print("1. Conectando a TON...")
        let tonWallet = try await walletManager.connectWallet(.tonkeeper, network: .ton)
        print("   ‚úÖ Conectado: \(tonWallet.name)")
        print("   üìç Direcci√≥n: \(tonWallet.address)")
        print("   üí∞ Balance: \(tonWallet.balance?.description ?? "No disponible")")
        print("")
        
        // Conectar a Algorand
        print("2. Conectando a Algorand...")
        let algoWallet = try await walletManager.connectWallet(.pera, network: .algorand)
        print("   ‚úÖ Conectado: \(algoWallet.name)")
        print("   üìç Direcci√≥n: \(algoWallet.address)")
        print("   üí∞ Balance: \(algoWallet.balance?.description ?? "No disponible")")
        print("")
        
        // Demo de transacciones
        print("üí∏ Demo de Transacciones:")
        print("")
        
        let transaction = TransactionRequest(
            to: "ALGORAND_ADDRESS_EXAMPLE_123456789",
            amount: Decimal(10.5),
            token: "ALGO",
            note: "Demo transaction",
            from: algoWallet.address
        )
        
        print("3. Enviando transacci√≥n...")
        let txHash = try await walletManager.sendTransaction(transaction)
        print("   ‚úÖ Transacci√≥n enviada: \(txHash)")
        print("")
        
        // Demo de QR
        print("üì± Demo de C√≥digos QR:")
        print("")
        
        let qrGenerator = QRCodeGenerator()
        let qrCode = try await qrGenerator.generateConnectionQR(for: .phantom, network: .solana)
        print("4. QR generado: \(qrCode)")
        print("")
        
        print("üéâ Demo completada exitosamente!")
        
    } catch {
        print("‚ùå Error en demo: \(error.localizedDescription)")
    }
}

// Mantener la app corriendo
RunLoop.main.run()
